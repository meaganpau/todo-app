{"version":3,"sources":["components/ToDoList/partials/TableRow/index.js","components/ToDoList/index.js","global/styles.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","handleToDoChange","handleRowDelete","toDo","i","submit","handleDateChange","isComplete","status","type","checked","name","onChange","e","placeholder","value","title","disabled","required","description","selected","due","date","minDate","Date","onClick","alt","Form","styled","ToDo","ToDoList","useState","toDos","setToDos","newToDo","setNewToDo","showCompleted","setShowCompleted","newToDos","field","target","splice","onSubmit","preventDefault","map","key","GlobalStyles","props","styles","css","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00aad46a.chunk.js","sourcesContent":["import React from 'react'\nimport DatePicker from 'react-datepicker'\n\nconst TableRow = (\n    {\n        handleToDoChange, \n        handleRowDelete, \n        toDo, \n        i, \n        submit, \n        handleDateChange\n    }) => {\n    const isComplete = toDo.status;\n    return (\n        <tr>\n            <td>\n                { !submit ? \n                    <input \n                    type='checkbox'\n                    checked={isComplete}\n                    name='status'\n                    onChange={(e) => handleToDoChange(e, i)}\n                    />\n                : null}\n            </td>\n            <td>\n                <input \n                    type='text'\n                    placeholder='Title'\n                    value={toDo.title}\n                    onChange={(e) => handleToDoChange(e, i)}\n                    name='title'\n                    disabled={isComplete}\n                    required\n                />\n            </td>\n            <td>\n                <input \n                    type='text'\n                    placeholder='Description'\n                    value={toDo.description}\n                    name='description'\n                    disabled={isComplete}\n                    onChange={(e) => handleToDoChange(e, i)}\n                />\n            </td>\n            <td>\n                <DatePicker \n                    selected={toDo.due} \n                    onChange={date => handleDateChange(date, i)} \n                    minDate={new Date()}\n                    disabled={isComplete}\n                />\n            </td>\n            <td>\n                {submit ? \n                    <input type='submit' value='Add Todo'/> :\n                    <button type='button' onClick={(e) => handleRowDelete(i)} alt=\"Delete To do\">ðŸ—‘</button>\n                }\n            </td>\n        </tr>\n    )\n}\n\nexport default TableRow","import React, { useState } from 'react'\nimport styled from '@emotion/styled'\nimport TableRow from './partials/TableRow'\n\nconst Form = styled('form')`\n    input:disabled {\n        background: #eee;\n    }\n`\n\nconst ToDo = {\n    'title': '',\n    'description': '',\n    'status': false,\n    'due': new Date()\n}\n\nconst ToDoList = () => {\n    const [toDos, setToDos] = useState([])\n    const [newToDo, setNewToDo] = useState({...ToDo})\n    const [showCompleted, setShowCompleted] = useState(true)\n\n    const handleCreateTodo = e => {\n        e.preventDefault()\n        if (newToDo) {\n            setToDos([...toDos, newToDo])\n            setNewToDo({...ToDo})\n        }\n    }\n\n    const handleDateChange = (date, i) => {\n        const newToDos = [...toDos]\n        newToDos[i]['due'] = date\n        setToDos(newToDos);\n    }\n\n    const handleToDoChange = (e, i) => {\n        const newToDos = [...toDos]\n        const field = e.target.name\n        newToDos[i][field] = field === 'status' ? e.target.checked : e.target.value\n        setToDos(newToDos);\n    }\n\n    const handleNewToDoChange = e => {\n        newToDo[e.target.name] = e.target.value\n        setNewToDo({...newToDo})\n    }\n    \n    const handleNewDateChange = date => {\n        newToDo['due'] = date\n        setNewToDo({...newToDo})\n    }\n\n    const handleRowDelete = i => {\n        const newToDos = [...toDos]\n        newToDos.splice(i, 1)\n        setToDos(newToDos);\n    }\n\n    const handleToggleCompleted = () => {\n        setShowCompleted(!showCompleted)\n    }\n\n    return (\n        <Form onSubmit={handleCreateTodo}>\n            <div>\n                <button type='button' onClick={handleToggleCompleted}>{showCompleted ? 'Hide' : 'Show'} Completed</button>\n            </div>\n            <table>\n                <tbody>\n                    <tr>\n                        <th>Status</th>\n                        <th>Title</th>\n                        <th>Description</th>\n                        <th>Due Date</th>\n                        <th>Action</th>\n                    </tr>\n                {toDos.map((toDo, i) => {\n                    if (!showCompleted && toDo.status) {\n                        return null \n                    }\n                    return (\n                        <TableRow \n                            key={i} \n                            i={i}\n                            toDo={toDo}\n                            handleToDoChange={handleToDoChange}\n                            handleRowDelete={handleRowDelete}\n                            handleDateChange={handleDateChange}\n                        />\n                    )\n                }\n                )}\n                <TableRow \n                    toDo={newToDo}\n                    handleToDoChange={handleNewToDoChange}\n                    handleDateChange={handleNewDateChange}\n                    submit={true}\n                />\n                </tbody>\n            </table>\n        </Form>\n    )\n}\n\nexport default ToDoList","import React from 'react'\nimport { Global, css } from '@emotion/core'\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport const GlobalStyles = props => (\n    <Global\n      styles={css`\n        body {\n            margin: 0;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n            sans-serif;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n        }\n      `}\n    />\n)","import React from 'react';\nimport styled from '@emotion/styled'\nimport ToDoList from './components/ToDoList'\nimport { GlobalStyles } from './global/styles'\n\nconst Container = styled('div')`\n  padding: 50px;\n`\n\nfunction App() {\n  return (\n    <Container>\n      <GlobalStyles/>\n      <h1>Your To Do List</h1>\n      <p>By: Meagan Pau</p>\n      <hr />\n      <ToDoList />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}